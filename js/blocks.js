// koffee 0.42.0
var Syntax, blocked, blocks, chai, chunked, klog, kstr, lines, noon, ranged, ref, slash, spaced, text;

ref = require('kxk'), slash = ref.slash, kstr = ref.kstr, klog = ref.klog, noon = ref.noon, chai = ref.chai;

if (koffee_4_0 = process.hrtime()) {
    Syntax = require('./syntax');
    Syntax.init();
    Syntax.swtch = {
        koffee: {
            'â–¸': {
                to: 'md',
                w0: 'doc',
                indent: 1
            }
        },
        md: {
            '```': {
                to: 'koffee',
                w0: 'coffeescript',
                end: '```'
            }
        }
    };
    text = slash.readText(__dirname + "/test.coffee");
    lines = text.split('\n');
    console.log('-----', require('pretty-time')(process.hrtime(koffee_4_0)));
};

chunked = function(lines, ext) {
    var lineno, word;
''
    word = function(w) {
        var ref1;
        return (ref1 = Syntax.lang[ext][w]) != null ? ref1 : 'text';
    };
    lineno = 0;
    return lines.map(function(text) {
        var c, chunks, i, l, last, len, line, m, pl, punct, re, rl, s, sc, w, wl;
        line = {
            chunks: [],
            chars: 0,
            index: lineno++,
            number: lineno,
            ext: ext
        };
        chunks = text.split(/\s/);
        if (chunks.length === 1 && chunks[0] === '') {
            return line;
        }
        c = 0;
        for (i = 0, len = chunks.length; i < len; i++) {
            s = chunks[i];
            if (s === '') {
                c++;
            } else {
                if (line.chunks.length) {
                    c++;
                }
                l = s.length;
                sc = c;
                re = /\W+/gi;
                while (m = re.exec(s)) {
                    if (m.index > 0) {
                        wl = m.index - (c - sc);
                        w = s.slice(c - sc, m.index);
                        line.chunks.push({
                            string: w,
                            column: c,
                            length: wl,
                            value: word(w)
                        });
                        c += wl;
                    }
                    punct = m[0];
                    pl = punct.length;
                    line.chunks.push({
                        string: m[0],
                        column: c,
                        length: pl,
                        value: 'punct'
                    });
                    c += pl;
                }
                if (c < sc + l) {
                    rl = sc + l - c;
                    w = s.slice(l - rl);
                    line.chunks.push({
                        string: w,
                        column: c,
                        length: rl,
                        value: word(w)
                    });
                    c += rl;
                }
            }
        }
        if (line.chunks.length) {
            last = line.chunks.slice(-1)[0];
            line.chars = last.column + last.length;
        }
        return line;
    });
};

blocked = function(lines) {
    var chunk, chunkIndex, extStack, i, j, len, line, mtch, ref1, ref2, ref3, ref4, ref5, top;
''
    extStack = [];
    for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        if (extStack.length) {
            top = extStack.slice(-1)[0];
            if (top["switch"].indent && ((ref1 = line.chunks[0]) != null ? ref1.column : void 0) <= top.start.chunks[0].column) {
                extStack.pop();
                line.ext = top.start.ext;
            } else {
                line.ext = top["switch"].to;
            }
        }
        for (chunkIndex = j = 0, ref2 = line.chunks.length; 0 <= ref2 ? j < ref2 : j > ref2; chunkIndex = 0 <= ref2 ? ++j : --j) {
            chunk = line.chunks[chunkIndex];
            if (chunk.value === 'punct') {
                if (mtch = (ref3 = Syntax.turd[line.ext]) != null ? ref3[chunk.string] : void 0) {
                    if (mtch.turd) {
                        chunk.value += ' ' + mtch.turd;
                    }
                    if (mtch['w-0']) {
                        if ((ref4 = line.chunks[chunkIndex + 1]) != null) {
                            ref4.value = mtch['w-0'];
                        }
                    }
                }
                if (extStack.length) {
                    top = extStack.slice(-1)[0];
                    if (top["switch"].end === chunk.string) {
                        extStack.pop();
                        line.ext = top.start.ext;
                        continue;
                    }
                }
                if (mtch = (ref5 = Syntax.swtch[line.ext]) != null ? ref5[chunk.string] : void 0) {
                    extStack.push({
                        "switch": mtch,
                        start: line
                    });
                }
            }
        }
    }
    return lines;
};

blocks = function(lines, ext) {
    if (ext == null) {
        ext = 'koffee';
    }
''
    return blocked(chunked(lines, ext));
};

ranged = function(lines) {
    var chunk, i, j, len, len1, line, range, ref1, rngs;
''
    rngs = [];
    for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        ref1 = line.chunks;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
            chunk = ref1[j];
            range = {
                start: chunk.column,
                match: chunk.string,
                value: chunk.value.replace('punct', 'punctuation')
            };
            rngs.push(range);
        }
    }
    return rngs;
};

if (koffee_204_0 = process.hrtime()) {
    spaced = ranged(blocks(lines));
    console.log('blocks', require('pretty-time')(process.hrtime(koffee_204_0)));
};

module.exports = {
    ranges: function(textline, ext) {
        return ranged(blocks([textline], ext));
    }
};

;

;

;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/blocks.coffee
// koffee 0.43.0
var Syntax, _, blocked, blocks, chai, chunked, klog, kstr, lines, noon, ranged, ranges, ref, slash, spaced, text;

ref = require('kxk'), slash = ref.slash, kstr = ref.kstr, klog = ref.klog, noon = ref.noon, chai = ref.chai, _ = ref._;

if (koffee_4_0 = process.hrtime()) {
    Syntax = require('./syntax');
    Syntax.init();
    Syntax.swtch = {
        koffee: {
            'â–¸': {
                to: 'md',
                w0: 'doc',
                indent: 1
            }
        },
        md: {
            '```': {
                to: 'koffee',
                w0: 'coffeescript',
                end: '```'
            }
        }
    };
    text = slash.readText(__dirname + "/../../koffee/coffee/nodes.coffee");
    lines = text.split('\n');
    console.log('-----', require('pretty-time')(process.hrtime(koffee_4_0)));
};

chunked = function(lines, ext) {
    var lineno, word;
''
    word = function(w) {
        if (Syntax.lang[ext].hasOwnProperty(w)) {
            return Syntax.lang[ext][w];
        } else {
            return 'text';
        }
    };
    lineno = 0;
    return lines.map(function(text) {
        var c, chunks, i, j, l, last, len, len1, line, m, pc, punct, re, ref1, rl, s, sc, w, wl;
        line = {
            chunks: [],
            chars: 0,
            index: lineno++,
            number: lineno,
            ext: ext
        };
        chunks = text.split(/\s/);
        if (chunks.length === 1 && chunks[0] === '') {
            return line;
        }
        c = 0;
        for (i = 0, len = chunks.length; i < len; i++) {
            s = chunks[i];
            if (s === '') {
                c++;
            } else {
                if (line.chunks.length) {
                    c++;
                }
                l = s.length;
                sc = c;
                re = /\W+/gi;
                while (m = re.exec(s)) {
                    if (m.index > 0) {
                        wl = m.index - (c - sc);
                        w = s.slice(c - sc, m.index);
                        line.chunks.push({
                            column: c,
                            length: wl,
                            string: w,
                            value: word(w)
                        });
                        c += wl;
                    }
                    punct = m[0];
                    if (punct.length > 1) {
                        line.chunks.push({
                            column: c++,
                            length: 1,
                            string: punct[0],
                            turd: punct,
                            value: 'punct'
                        });
                        ref1 = punct.slice(1);
                        for (j = 0, len1 = ref1.length; j < len1; j++) {
                            pc = ref1[j];
                            line.chunks.push({
                                column: c++,
                                length: 1,
                                string: pc,
                                value: 'punct'
                            });
                        }
                    } else {
                        line.chunks.push({
                            column: c++,
                            length: 1,
                            string: punct,
                            value: 'punct'
                        });
                    }
                }
                if (c < sc + l) {
                    rl = sc + l - c;
                    w = s.slice(l - rl);
                    line.chunks.push({
                        column: c,
                        length: rl,
                        string: w,
                        value: word(w)
                    });
                    c += rl;
                }
            }
        }
        if (line.chunks.length) {
            last = line.chunks.slice(-1)[0];
            line.chars = last.column + last.length;
        }
        return line;
    });
};

blocked = function(lines) {
    var advance, beforeIndex, chunk, chunkIndex, dashArrow, ext, extStack, handl, handlers, hashComment, hnd, i, j, k, len, len1, len2, line, mtch, popped, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, regexp, slashComment, stack, stacks, top;
''
    extStack = [];
    stacks = [];
    handl = [];
    stack = null;
    ext = null;
    chunk = null;
    line = null;
    chunkIndex = null;
    hashComment = function() {
        var c, i, len, ref1;
        if (stack.length > 1) {
            return 0;
        }
        if (chunk.string === "#") {
            chunk.value += ' comment';
            if (chunkIndex < line.chunks.length - 1) {
                ref1 = line.chunks.slice(chunkIndex + 1);
                for (i = 0, len = ref1.length; i < len; i++) {
                    c = ref1[i];
                    c.value = 'comment';
                }
            }
            return line.chunks.length - chunkIndex + 1;
        }
        return 0;
    };
    slashComment = function() {
        return 0;
    };
    dashArrow = function() {
        var prev;
        if (chunk.string === '>' && chunkIndex > 0) {
            prev = line.chunks[chunkIndex - 1];
            if (prev.string === '-') {
                prev.value += ' function tail';
                chunk.value += ' function head';
                return 1;
            }
            if (prev.string === '=') {
                prev.value += ' function bound tail';
                chunk.value += ' function bound head';
                return 1;
            }
        }
        return 0;
    };
    regexp = function() {
        if (chunk.string === '/') {
            chunk.value += ' regexp';
            return 1;
        }
        return 0;
    };
    handlers = {
        koffee: {
            punct: [hashComment, dashArrow, regexp]
        },
        coffee: {
            punct: [hashComment, dashArrow, regexp]
        },
        js: {
            punct: [slashComment, dashArrow, regexp]
        },
        ts: {
            punct: [slashComment, dashArrow, regexp]
        },
        md: {}
    };
    for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        if (extStack.length) {
            top = extStack.slice(-1)[0];
            if (top["switch"].indent && ((ref1 = line.chunks[0]) != null ? ref1.column : void 0) <= top.start.chunks[0].column) {
                extStack.pop();
                line.pop = true;
                line.ext = top.start.ext;
            } else {
                line.ext = top["switch"].to;
            }
        }
        if (ext !== line.ext) {
            ext = line.ext;
            if (stacks.length && line.pop) {
                stack = stacks.pop;
            } else {
                if (stack) {
                    stacks.push(stack);
                }
                stack = [
                    {
                        ext: ext
                    }
                ];
            }
            handl = handlers[ext];
        }
        chunkIndex = 0;
        while (chunkIndex < line.chunks.length) {
            chunk = line.chunks[chunkIndex];
            beforeIndex = chunkIndex;
            if (chunk.value === 'punct') {
                if (mtch = (ref2 = Syntax.turd[line.ext]) != null ? ref2[chunk.string] : void 0) {
                    if (mtch.turd) {
                        chunk.value += ' ' + mtch.turd;
                    }
                    if (mtch['w-0']) {
                        if ((ref3 = line.chunks[chunkIndex + 1]) != null) {
                            ref3.value = mtch['w-0'];
                        }
                    }
                }
                if (extStack.length) {
                    top = extStack.slice(-1)[0];
                    if (top["switch"].end === chunk.string) {
                        extStack.pop();
                        line.pop = true;
                        line.ext = top.start.ext;
                        popped = true;
                    }
                }
                if (!popped) {
                    if (mtch = (ref4 = Syntax.swtch[line.ext]) != null ? ref4[chunk.turd] : void 0) {
                        extStack.push({
                            "switch": mtch,
                            start: line
                        });
                    }
                }
                ref6 = (ref5 = handl.punct) != null ? ref5 : [];
                for (j = 0, len1 = ref6.length; j < len1; j++) {
                    hnd = ref6[j];
                    if (advance = hnd()) {
                        chunkIndex += advance;
                        break;
                    }
                }
            } else {
                ref8 = (ref7 = handl.word) != null ? ref7 : [];
                for (k = 0, len2 = ref8.length; k < len2; k++) {
                    hnd = ref8[k];
                    if (advance = hnd()) {
                        chunkIndex += advance;
                        break;
                    }
                }
            }
            if (chunkIndex === beforeIndex) {
                chunkIndex++;
            }
        }
    }
    return lines;
};

blocks = function(lines, ext) {
    if (ext == null) {
        ext = 'koffee';
    }
''
    return blocked(chunked(lines, ext));
};

ranged = function(lines) {
    var chunk, i, j, len, len1, line, range, ref1, rngs;
''
    rngs = [];
    for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        ref1 = line.chunks;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
            chunk = ref1[j];
            if (!chunk.value.replace) {
                klog(chunk.value);
            }
            range = {
                start: chunk.column,
                match: chunk.string,
                value: chunk.value.replace('punct', 'punctuation')
            };
            rngs.push(range);
        }
    }
    return rngs;
};

if (koffee_297_0 = process.hrtime()) {
    spaced = blocks(lines);
    console.log('blocks', require('pretty-time')(process.hrtime(koffee_297_0)));
};

if (koffee_301_0 = process.hrtime()) {
    ranges = lines.map(function(l) {
        return Syntax.ranges(l, 'koffee');
    });
    console.log('syntax1', require('pretty-time')(process.hrtime(koffee_301_0)));
};

module.exports = {
    ranges: function(textline, ext) {
        return ranged(blocks([textline], ext));
    }
};

;

;

;

;

;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/blocks.coffee